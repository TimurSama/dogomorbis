#!/bin/bash

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ Dogymorbis..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
check_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
echo -e "\n${YELLOW}üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker...${NC}"
if command -v docker &> /dev/null; then
    check_status 0 "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    docker --version
else
    check_status 1 "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

if command -v docker-compose &> /dev/null; then
    check_status 0 "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    docker-compose --version
else
    check_status 1 "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
echo -e "\n${YELLOW}üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js...${NC}"
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$NODE_VERSION" -ge 18 ]; then
        check_status 0 "Node.js –≤–µ—Ä—Å–∏–∏ $(node --version) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        check_status 1 "Node.js –≤–µ—Ä—Å–∏–∏ $(node --version) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è >= 18)"
    fi
else
    check_status 1 "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

if command -v npm &> /dev/null; then
    check_status 0 "npm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    npm --version
else
    check_status 1 "npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
echo -e "\n${YELLOW}üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...${NC}"

if [ -f "package.json" ]; then
    check_status 0 "–ö–æ—Ä–Ω–µ–≤–æ–π package.json –Ω–∞–π–¥–µ–Ω"
else
    check_status 1 "–ö–æ—Ä–Ω–µ–≤–æ–π package.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

if [ -f "docker-compose.dev.yml" ]; then
    check_status 0 "docker-compose.dev.yml –Ω–∞–π–¥–µ–Ω"
else
    check_status 1 "docker-compose.dev.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

if [ -f "start-dev.sh" ]; then
    check_status 0 "start-dev.sh –Ω–∞–π–¥–µ–Ω"
    chmod +x start-dev.sh
else
    check_status 1 "start-dev.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

if [ -f "backend/package.json" ]; then
    check_status 0 "Backend package.json –Ω–∞–π–¥–µ–Ω"
else
    check_status 1 "Backend package.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

if [ -f "frontend/package.json" ]; then
    check_status 0 "Frontend package.json –Ω–∞–π–¥–µ–Ω"
else
    check_status 1 "Frontend package.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

if [ -f "backend/prisma/schema.prisma" ]; then
    check_status 0 "Prisma —Å—Ö–µ–º–∞ –Ω–∞–π–¥–µ–Ω–∞"
else
    check_status 1 "Prisma —Å—Ö–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo -e "\n${YELLOW}üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"

if [ -f "backend/.env" ]; then
    check_status 0 "Backend .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω"
else
    if [ -f "backend/env.example" ]; then
        check_status 1 "Backend .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–µ—Å—Ç—å env.example)"
        echo -e "${YELLOW}üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª: cp backend/env.example backend/.env${NC}"
    else
        check_status 1 "Backend .env —Ñ–∞–π–ª –∏ env.example –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
fi

if [ -f "frontend/.env.local" ]; then
    check_status 0 "Frontend .env.local —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω"
else
    check_status 1 "Frontend .env.local —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    echo -e "${YELLOW}üí° –°–æ–∑–¥–∞–π—Ç–µ .env.local —Ñ–∞–π–ª —Å NEXT_PUBLIC_API_URL=http://localhost:3001${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
echo -e "\n${YELLOW}üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤...${NC}"

if netstat -tuln 2>/dev/null | grep -q ":3000 "; then
    check_status 1 "–ü–æ—Ä—Ç 3000 –∑–∞–Ω—è—Ç"
else
    check_status 0 "–ü–æ—Ä—Ç 3000 —Å–≤–æ–±–æ–¥–µ–Ω"
fi

if netstat -tuln 2>/dev/null | grep -q ":3001 "; then
    check_status 1 "–ü–æ—Ä—Ç 3001 –∑–∞–Ω—è—Ç"
else
    check_status 0 "–ü–æ—Ä—Ç 3001 —Å–≤–æ–±–æ–¥–µ–Ω"
fi

if netstat -tuln 2>/dev/null | grep -q ":5432 "; then
    check_status 1 "–ü–æ—Ä—Ç 5432 (PostgreSQL) –∑–∞–Ω—è—Ç"
else
    check_status 0 "–ü–æ—Ä—Ç 5432 (PostgreSQL) —Å–≤–æ–±–æ–¥–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo -e "\n${YELLOW}üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"

if docker ps -a --format "table {{.Names}}" | grep -q "dogymorbis"; then
    echo -e "${YELLOW}‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã Dogymorbis${NC}"
    docker ps -a --filter "name=dogymorbis" --format "table {{.Names}}\t{{.Status}}"
    echo -e "${YELLOW}üí° –î–ª—è –æ—á–∏—Å—Ç–∫–∏: docker-compose -f docker-compose.dev.yml down -v${NC}"
else
    check_status 0 "–ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Dogymorbis"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo -e "\n${YELLOW}üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"

if [ -d "node_modules" ]; then
    check_status 0 "–ö–æ—Ä–Ω–µ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
else
    check_status 1 "–ö–æ—Ä–Ω–µ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    echo -e "${YELLOW}üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install${NC}"
fi

if [ -d "backend/node_modules" ]; then
    check_status 0 "Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
else
    check_status 1 "Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    echo -e "${YELLOW}üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: cd backend && npm install${NC}"
fi

if [ -d "frontend/node_modules" ]; then
    check_status 0 "Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
else
    check_status 1 "Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    echo -e "${YELLOW}üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: cd frontend && npm install${NC}"
fi

# –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
echo -e "\n${YELLOW}üìä –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:${NC}"

# –ü–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
ERRORS=0

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
[ ! -f "package.json" ] && ((ERRORS++))
[ ! -f "docker-compose.dev.yml" ] && ((ERRORS++))
[ ! -f "start-dev.sh" ] && ((ERRORS++))
[ ! -f "backend/package.json" ] && ((ERRORS++))
[ ! -f "frontend/package.json" ] && ((ERRORS++))
[ ! -f "backend/prisma/schema.prisma" ] && ((ERRORS++))

if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}üéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!${NC}"
    echo -e "\n${YELLOW}üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:${NC}"
    echo -e "   ${GREEN}./start-dev.sh${NC}"
    echo -e "\n${YELLOW}üìñ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ SETUP.md${NC}"
else
    echo -e "${RED}‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.${NC}"
    echo -e "\n${YELLOW}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:${NC}"
    echo -e "   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    echo -e "   2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    echo -e "   3. –û—Å–≤–æ–±–æ–¥–∏—Ç–µ –∑–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã"
    echo -e "   4. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É: ${GREEN}./check-setup.sh${NC}"
fi

echo -e "\n${YELLOW}üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:${NC}"
echo -e "   ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: SETUP.md"
echo -e "   ‚Ä¢ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:3001/api/docs (–ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞)"
echo -e "   ‚Ä¢ –õ–æ–≥–∏: docker-compose -f docker-compose.dev.yml logs -f"

