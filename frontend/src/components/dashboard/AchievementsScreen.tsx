'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  Award, 
  Trophy, 
  Star, 
  Target, 
  Calendar,
  MapPin,
  Users,
  Heart,
  Zap,
  Crown,
  Medal,
  Badge,
  Filter,
  Search
} from 'lucide-react';
import { Button } from '@/components/ui/button';

interface Achievement {
  id: string;
  title: string;
  description: string;
  category: 'walking' | 'training' | 'social' | 'health' | 'special';
  rarity: 'common' | 'rare' | 'epic' | 'legendary';
  icon: string;
  isUnlocked: boolean;
  unlockedAt?: string;
  progress?: number;
  maxProgress?: number;
  reward?: string;
  requirements: string[];
}

export function AchievementsScreen() {
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [selectedRarity, setSelectedRarity] = useState<string>('all');

  const mockAchievements: Achievement[] = [
    {
      id: '1',
      title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
      description: '–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–æ–≥—É–ª–∫—É —Å —Å–æ–±–∞–∫–æ–π',
      category: 'walking',
      rarity: 'common',
      icon: 'üö∂‚Äç‚ôÇÔ∏è',
      isUnlocked: true,
      unlockedAt: '2024-01-10',
      reward: '10 –∫–æ—Å—Ç–æ—á–µ–∫',
      requirements: ['–°–æ–≤–µ—Ä—à–∏—Ç—å 1 –ø—Ä–æ–≥—É–ª–∫—É']
    },
    {
      id: '2',
      title: '–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–≥—É–ª–æ–∫',
      description: '–°–æ–≤–µ—Ä—à–∏—Ç–µ 100 –ø—Ä–æ–≥—É–ª–æ–∫',
      category: 'walking',
      rarity: 'rare',
      icon: 'üèÉ‚Äç‚ôÇÔ∏è',
      isUnlocked: false,
      progress: 45,
      maxProgress: 100,
      reward: '50 –∫–æ—Å—Ç–æ—á–µ–∫ + —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—à–µ–π–Ω–∏–∫',
      requirements: ['–°–æ–≤–µ—Ä—à–∏—Ç—å 100 –ø—Ä–æ–≥—É–ª–æ–∫']
    },
    {
      id: '3',
      title: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞',
      description: '–ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å 10 –¥—Ä—É–≥–∏–º–∏ —Å–æ–±–∞—á–Ω–∏–∫–∞–º–∏',
      category: 'social',
      rarity: 'epic',
      icon: 'ü¶ã',
      isUnlocked: false,
      progress: 7,
      maxProgress: 10,
      reward: '100 –∫–æ—Å—Ç–æ—á–µ–∫ + –∑–Ω–∞—á–æ–∫ "–°–æ—Ü–∏–∞–ª—å–Ω—ã–π"',
      requirements: ['–î–æ–±–∞–≤–∏—Ç—å 10 –¥—Ä—É–∑–µ–π']
    },
    {
      id: '4',
      title: '–î—Ä–µ—Å—Å–∏—Ä–æ–≤—â–∏–∫ –≥–æ–¥–∞',
      description: '–ü—Ä–æ–π–¥–∏—Ç–µ 50 –∑–∞–Ω—è—Ç–∏–π –ø–æ –¥—Ä–µ—Å—Å–∏—Ä–æ–≤–∫–µ',
      category: 'training',
      rarity: 'legendary',
      icon: 'üéì',
      isUnlocked: false,
      progress: 12,
      maxProgress: 50,
      reward: '500 –∫–æ—Å—Ç–æ—á–µ–∫ + –∑–æ–ª–æ—Ç–æ–π –æ—à–µ–π–Ω–∏–∫ + —Ç–∏—Ç—É–ª "–î—Ä–µ—Å—Å–∏—Ä–æ–≤—â–∏–∫"',
      requirements: ['–ü—Ä–æ–π–¥–∏—Ç–µ 50 –∑–∞–Ω—è—Ç–∏–π', '–ü–æ–ª—É—á–∏—Ç–µ –æ—Ü–µ–Ω–∫—É 5 –∑–≤–µ–∑–¥']
    },
    {
      id: '5',
      title: '–ó–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏',
      description: '–í–µ–¥–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
      category: 'health',
      rarity: 'rare',
      icon: 'üí™',
      isUnlocked: true,
      unlockedAt: '2024-01-05',
      reward: '25 –∫–æ—Å—Ç–æ—á–µ–∫ + –±—Ä–∞—Å–ª–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è',
      requirements: ['30 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥—Ä—è–¥']
    },
    {
      id: '6',
      title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
      description: '–ü–æ—Å–µ—Ç–∏—Ç–µ 20 —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫',
      category: 'walking',
      rarity: 'epic',
      icon: 'üó∫Ô∏è',
      isUnlocked: false,
      progress: 8,
      maxProgress: 20,
      reward: '75 –∫–æ—Å—Ç–æ—á–µ–∫ + –∫–∞—Ä—Ç–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è',
      requirements: ['–ü–æ—Å–µ—Ç–∏—Ç—å 20 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç']
    },
    {
      id: '7',
      title: '–°–µ—Ä–¥—Ü–µ –∑–æ–ª–æ—Ç–∞',
      description: '–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ 5 –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–∫—Ü–∏—è—Ö',
      category: 'special',
      rarity: 'legendary',
      icon: '‚ù§Ô∏è',
      isUnlocked: false,
      progress: 2,
      maxProgress: 5,
      reward: '200 –∫–æ—Å—Ç–æ—á–µ–∫ + —Ç–∏—Ç—É–ª "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å" + —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫',
      requirements: ['–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ 5 –∞–∫—Ü–∏—è—Ö', '–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º 1000 —Ä—É–±–ª–µ–π']
    },
    {
      id: '8',
      title: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π',
      description: '–ü—Ä–æ–π–¥–∏—Ç–µ 10 –∫–º –∑–∞ –æ–¥–Ω—É –ø—Ä–æ–≥—É–ª–∫—É',
      category: 'walking',
      rarity: 'rare',
      icon: '‚ö°',
      isUnlocked: true,
      unlockedAt: '2024-01-12',
      reward: '30 –∫–æ—Å—Ç–æ—á–µ–∫ + —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ—à–µ–π–Ω–∏–∫',
      requirements: ['–ü—Ä–æ–π–¥–∏—Ç–µ 10 –∫–º –∑–∞ —Ä–∞–∑']
    }
  ];

  const categories = [
    { id: 'all', label: '–í—Å–µ', icon: Award },
    { id: 'walking', label: '–ü—Ä–æ–≥—É–ª–∫–∏', icon: MapPin },
    { id: 'training', label: '–î—Ä–µ—Å—Å–∏—Ä–æ–≤–∫–∞', icon: Target },
    { id: 'social', label: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ', icon: Users },
    { id: 'health', label: '–ó–¥–æ—Ä–æ–≤—å–µ', icon: Heart },
    { id: 'special', label: '–û—Å–æ–±—ã–µ', icon: Crown },
  ];

  const rarities = [
    { id: 'all', label: '–í—Å–µ', color: 'bg-gray-100 text-gray-700' },
    { id: 'common', label: '–û–±—ã—á–Ω—ã–µ', color: 'bg-gray-100 text-gray-700' },
    { id: 'rare', label: '–†–µ–¥–∫–∏–µ', color: 'bg-blue-100 text-blue-700' },
    { id: 'epic', label: '–≠–ø–∏—á–µ—Å–∫–∏–µ', color: 'bg-purple-100 text-purple-700' },
    { id: 'legendary', label: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ', color: 'bg-yellow-100 text-yellow-700' },
  ];

  const getRarityColor = (rarity: string) => {
    switch (rarity) {
      case 'common': return 'bg-gray-100 text-gray-700';
      case 'rare': return 'bg-blue-100 text-blue-700';
      case 'epic': return 'bg-purple-100 text-purple-700';
      case 'legendary': return 'bg-yellow-100 text-yellow-700';
      default: return 'bg-gray-100 text-gray-700';
    }
  };

  const filteredAchievements = mockAchievements.filter(achievement => {
    const matchesCategory = selectedCategory === 'all' || achievement.category === selectedCategory;
    const matchesRarity = selectedRarity === 'all' || achievement.rarity === selectedRarity;
    return matchesCategory && matchesRarity;
  });

  const unlockedCount = mockAchievements.filter(a => a.isUnlocked).length;
  const totalCount = mockAchievements.length;

  return (
    <div className="h-full flex flex-col bg-gradient-to-br from-pink-50 via-purple-50 to-blue-50 overflow-hidden fur-texture">
      {/* Header */}
      <div className="bg-white/90 backdrop-blur-sm border-b border-pink-200/30 p-4 flex-shrink-0 soft-shadow pencil-border">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-xl font-bold text-purple-700 font-display">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h1>
            <p className="text-sm text-purple-600">–í–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å</p>
          </div>
          <div className="text-right">
            <div className="text-2xl font-bold text-purple-700">{unlockedCount}/{totalCount}</div>
            <div className="text-sm text-purple-600">–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</div>
          </div>
        </div>

        {/* Progress Bar */}
        <div className="mb-4">
          <div className="flex items-center justify-between text-sm text-gray-700 mb-2">
            <span>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</span>
            <span>{Math.round((unlockedCount / totalCount) * 100)}%</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-gradient-to-r from-pink-300 to-purple-400 h-2 rounded-full transition-all duration-300"
              style={{ width: `${(unlockedCount / totalCount) * 100}%` }}
            ></div>
          </div>
        </div>

        {/* Filters */}
        <div className="flex space-x-4">
          <div className="flex-1">
            <p className="text-sm text-gray-700 mb-2">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</p>
            <div className="flex space-x-2 overflow-x-auto pb-2">
              {categories.map((category) => {
                const Icon = category.icon;
                return (
                  <button
                    key={category.id}
                    onClick={() => setSelectedCategory(category.id)}
                    className={`flex items-center space-x-2 px-3 py-2 rounded-full text-sm font-medium transition-colors whitespace-nowrap ${
                      selectedCategory === category.id
                        ? 'bg-purple-100 text-purple-700'
                        : 'bg-white/80 text-gray-700 hover:bg-pink-50'
                    }`}
                  >
                    <Icon className="h-4 w-4" />
                    <span>{category.label}</span>
                  </button>
                );
              })}
            </div>
          </div>
        </div>

        <div className="mt-4">
          <p className="text-sm text-gray-700 mb-2">–†–µ–¥–∫–æ—Å—Ç—å:</p>
          <div className="flex space-x-2 overflow-x-auto pb-2">
            {rarities.map((rarity) => (
              <button
                key={rarity.id}
                onClick={() => setSelectedRarity(rarity.id)}
                className={`px-3 py-2 rounded-full text-sm font-medium transition-colors whitespace-nowrap ${
                  selectedRarity === rarity.id
                    ? 'ring-2 ring-purple-500'
                    : ''
                } ${rarity.color}`}
              >
                {rarity.label}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="flex-1 overflow-y-auto p-4 bg-gradient-to-br from-pink-50 via-purple-50 to-blue-50">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {filteredAchievements.map((achievement, index) => (
            <motion.div
              key={achievement.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              className={`bg-white/95 backdrop-blur-sm rounded-3xl p-6 soft-shadow pencil-border fur-texture ${
                achievement.isUnlocked ? '' : 'opacity-60'
              }`}
            >
              <div className="flex items-start space-x-4">
                <div className={`text-4xl ${achievement.isUnlocked ? '' : 'grayscale'}`}>
                  {achievement.icon}
                </div>
                
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    <h3 className="text-lg font-semibold text-gray-800">{achievement.title}</h3>
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getRarityColor(achievement.rarity)}`}>
                      {achievement.rarity}
                    </span>
                  </div>
                  
                  <p className="text-gray-700 mb-3">{achievement.description}</p>
                  
                  {achievement.isUnlocked ? (
                    <div className="space-y-2">
                      <div className="flex items-center space-x-2 text-sm text-green-600">
                        <Trophy className="h-4 w-4" />
                        <span>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ {achievement.unlockedAt}</span>
                      </div>
                      {achievement.reward && (
                        <div className="text-sm text-purple-600">
                          <strong>–ù–∞–≥—Ä–∞–¥–∞:</strong> {achievement.reward}
                        </div>
                      )}
                    </div>
                  ) : (
                    <div className="space-y-2">
                      {achievement.progress !== undefined && achievement.maxProgress !== undefined && (
                        <div>
                          <div className="flex items-center justify-between text-sm text-gray-700 mb-1">
                            <span>–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
                            <span>{achievement.progress}/{achievement.maxProgress}</span>
                          </div>
                          <div className="w-full bg-gray-200 rounded-full h-2">
                            <div 
                              className="bg-gradient-to-r from-pink-300 to-purple-400 h-2 rounded-full transition-all duration-300"
                              style={{ width: `${(achievement.progress / achievement.maxProgress) * 100}%` }}
                            ></div>
                          </div>
                        </div>
                      )}
                      {achievement.reward && (
                        <div className="text-sm text-gray-600">
                          <strong>–ù–∞–≥—Ä–∞–¥–∞:</strong> {achievement.reward}
                        </div>
                      )}
                    </div>
                  )}
                  
                  <div className="mt-3">
                    <p className="text-xs text-gray-600 mb-1">–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</p>
                    <ul className="text-xs text-gray-600 space-y-1">
                      {achievement.requirements.map((req, reqIndex) => (
                        <li key={reqIndex} className="flex items-center space-x-1">
                          <span className="w-1 h-1 bg-purple-400 rounded-full"></span>
                          <span>{req}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
            </motion.div>
          ))}
        </div>

        {filteredAchievements.length === 0 && (
          <div className="text-center py-12">
            <Award className="h-16 w-16 text-purple-300 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-gray-800 mb-2">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p className="text-gray-600">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</p>
          </div>
        )}
      </div>
    </div>
  );
}
