import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –¢–∏–ø—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
export interface AchievementConfig {
  id: string;
  type: 'WALKING' | 'TRAINING' | 'SOCIAL' | 'COLLECTION' | 'LEVEL' | 'SPECIAL' | 'REFERRAL' | 'COMMUNITY';
  title: string;
  description: string;
  icon: string;
  rarity: 'COMMON' | 'UNCOMMON' | 'RARE' | 'EPIC' | 'LEGENDARY';
  condition: {
    type: 'COUNT' | 'STREAK' | 'TIME' | 'VALUE' | 'COMBINATION';
    target: number;
    metric: string;
    timeframe?: 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'ALL_TIME';
  };
  rewards: {
    experience: number;
    bones: number;
    badge?: string;
  };
  hidden: boolean;
  category: string;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
export const ACHIEVEMENT_CONFIGS: AchievementConfig[] = [
  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø—Ä–æ–≥—É–ª–∫–∏
  {
    id: 'first_walk',
    type: 'WALKING',
    title: '–ü–µ—Ä–≤–∞—è –ø—Ä–æ–≥—É–ª–∫–∞',
    description: '–ó–∞–ø–∏—Å–∞–ª–∏ –ø–µ—Ä–≤—É—é –ø—Ä–æ–≥—É–ª–∫—É —Å —Å–æ–±–∞–∫–æ–π',
    icon: 'üö∂‚Äç‚ôÇÔ∏è',
    rarity: 'COMMON',
    condition: { type: 'COUNT', target: 1, metric: 'walks_logged' },
    rewards: { experience: 25, bones: 10 },
    hidden: false,
    category: '–ü—Ä–æ–≥—É–ª–∫–∏',
  },
  {
    id: 'walking_enthusiast',
    type: 'WALKING',
    title: '–≠–Ω—Ç—É–∑–∏–∞—Å—Ç –ø—Ä–æ–≥—É–ª–æ–∫',
    description: '–ó–∞–ø–∏—Å–∞–ª–∏ 10 –ø—Ä–æ–≥—É–ª–æ–∫',
    icon: 'üö∂‚Äç‚ôÇÔ∏èüö∂‚Äç‚ôÇÔ∏è',
    rarity: 'COMMON',
    condition: { type: 'COUNT', target: 10, metric: 'walks_logged' },
    rewards: { experience: 50, bones: 25 },
    hidden: false,
    category: '–ü—Ä–æ–≥—É–ª–∫–∏',
  },
  {
    id: 'daily_walker',
    type: 'WALKING',
    title: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥—É–ª—è–∫–∞',
    description: '–ì—É–ª—è–ª–∏ —Å —Å–æ–±–∞–∫–æ–π 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    icon: 'üìÖ',
    rarity: 'UNCOMMON',
    condition: { type: 'STREAK', target: 7, metric: 'daily_walks' },
    rewards: { experience: 100, bones: 50 },
    hidden: false,
    category: '–ü—Ä–æ–≥—É–ª–∫–∏',
  },
  {
    id: 'marathon_walker',
    type: 'WALKING',
    title: '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü',
    description: '–ó–∞–ø–∏—Å–∞–ª–∏ 100 –ø—Ä–æ–≥—É–ª–æ–∫',
    icon: 'üèÉ‚Äç‚ôÇÔ∏è',
    rarity: 'RARE',
    condition: { type: 'COUNT', target: 100, metric: 'walks_logged' },
    rewards: { experience: 200, bones: 100 },
    hidden: false,
    category: '–ü—Ä–æ–≥—É–ª–∫–∏',
  },

  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  {
    id: 'first_training',
    type: 'TRAINING',
    title: '–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
    description: '–ü—Ä–æ–≤–µ–ª–∏ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å —Å–æ–±–∞–∫–æ–π',
    icon: 'üéì',
    rarity: 'COMMON',
    condition: { type: 'COUNT', target: 1, metric: 'trainings_logged' },
    rewards: { experience: 30, bones: 15 },
    hidden: false,
    category: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
  },
  {
    id: 'training_master',
    type: 'TRAINING',
    title: '–ú–∞—Å—Ç–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
    description: '–ü—Ä–æ–≤–µ–ª–∏ 50 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
    icon: 'üèÜ',
    rarity: 'RARE',
    condition: { type: 'COUNT', target: 50, metric: 'trainings_logged' },
    rewards: { experience: 150, bones: 75 },
    hidden: false,
    category: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
  },

  // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  {
    id: 'first_post',
    type: 'SOCIAL',
    title: '–ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç',
    description: '–°–æ–∑–¥–∞–ª–∏ –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç',
    icon: 'üìù',
    rarity: 'COMMON',
    condition: { type: 'COUNT', target: 1, metric: 'posts_created' },
    rewards: { experience: 15, bones: 5 },
    hidden: false,
    category: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
  },
  {
    id: 'social_butterfly',
    type: 'SOCIAL',
    title: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞',
    description: '–°–æ–∑–¥–∞–ª–∏ 50 –ø–æ—Å—Ç–æ–≤',
    icon: 'ü¶ã',
    rarity: 'UNCOMMON',
    condition: { type: 'COUNT', target: 50, metric: 'posts_created' },
    rewards: { experience: 100, bones: 50 },
    hidden: false,
    category: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
  },
  {
    id: 'popular_author',
    type: 'SOCIAL',
    title: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∞–≤—Ç–æ—Ä',
    description: '–ü–æ–ª—É—á–∏–ª–∏ 100 –ª–∞–π–∫–æ–≤ –Ω–∞ –ø–æ—Å—Ç—ã',
    icon: '‚ù§Ô∏è',
    rarity: 'RARE',
    condition: { type: 'COUNT', target: 100, metric: 'likes_received' },
    rewards: { experience: 150, bones: 75 },
    hidden: false,
    category: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
  },

  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–±–æ—Ä –∫–æ—Å—Ç–æ—á–µ–∫
  {
    id: 'first_bone',
    type: 'COLLECTION',
    title: '–ü–µ—Ä–≤–∞—è –∫–æ—Å—Ç–æ—á–∫–∞',
    description: '–°–æ–±—Ä–∞–ª–∏ –ø–µ—Ä–≤—É—é –∫–æ—Å—Ç–æ—á–∫—É',
    icon: 'ü¶¥',
    rarity: 'COMMON',
    condition: { type: 'COUNT', target: 1, metric: 'bones_collected' },
    rewards: { experience: 10, bones: 5 },
    hidden: false,
    category: '–°–±–æ—Ä –∫–æ—Å—Ç–æ—á–µ–∫',
  },
  {
    id: 'bone_collector',
    type: 'COLLECTION',
    title: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –∫–æ—Å—Ç–æ—á–µ–∫',
    description: '–°–æ–±—Ä–∞–ª–∏ 100 –∫–æ—Å—Ç–æ—á–µ–∫',
    icon: 'üì¶',
    rarity: 'UNCOMMON',
    condition: { type: 'COUNT', target: 100, metric: 'bones_collected' },
    rewards: { experience: 100, bones: 50 },
    hidden: false,
    category: '–°–±–æ—Ä –∫–æ—Å—Ç–æ—á–µ–∫',
  },
  {
    id: 'golden_hunter',
    type: 'COLLECTION',
    title: '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –∑–æ–ª–æ—Ç–æ–º',
    description: '–°–æ–±—Ä–∞–ª–∏ 10 –∑–æ–ª–æ—Ç—ã—Ö –∫–æ—Å—Ç–æ—á–µ–∫',
    icon: 'ü•á',
    rarity: 'EPIC',
    condition: { type: 'COUNT', target: 10, metric: 'golden_bones_collected' },
    rewards: { experience: 300, bones: 200 },
    hidden: false,
    category: '–°–±–æ—Ä –∫–æ—Å—Ç–æ—á–µ–∫',
  },

  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–≤–Ω–∏
  {
    id: 'level_5',
    type: 'LEVEL',
    title: '–û–ø—ã—Ç–Ω—ã–π —Å–æ–±–∞—á–Ω–∏–∫',
    description: '–î–æ—Å—Ç–∏–≥–ª–∏ 5 —É—Ä–æ–≤–Ω—è',
    icon: '‚≠ê',
    rarity: 'UNCOMMON',
    condition: { type: 'VALUE', target: 5, metric: 'level' },
    rewards: { experience: 0, bones: 100 },
    hidden: false,
    category: '–£—Ä–æ–≤–Ω–∏',
  },
  {
    id: 'level_10',
    type: 'LEVEL',
    title: '–ò–º–ø–µ—Ä–∞—Ç–æ—Ä —Å–æ–±–∞–∫',
    description: '–î–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è',
    icon: 'üëë',
    rarity: 'LEGENDARY',
    condition: { type: 'VALUE', target: 10, metric: 'level' },
    rewards: { experience: 0, bones: 500 },
    hidden: false,
    category: '–£—Ä–æ–≤–Ω–∏',
  },

  // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  {
    id: 'first_referral',
    type: 'REFERRAL',
    title: '–ü–µ—Ä–≤—ã–π –¥—Ä—É–≥',
    description: '–ü—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞',
    icon: 'üë•',
    rarity: 'COMMON',
    condition: { type: 'COUNT', target: 1, metric: 'referrals_successful' },
    rewards: { experience: 100, bones: 100 },
    hidden: false,
    category: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
  },
  {
    id: 'social_networker',
    type: 'REFERRAL',
    title: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å–µ—Ç–µ–≤—â–∏–∫',
    description: '–ü—Ä–∏–≥–ª–∞—Å–∏–ª–∏ 10 –¥—Ä—É–∑–µ–π',
    icon: 'üåê',
    rarity: 'RARE',
    condition: { type: 'COUNT', target: 10, metric: 'referrals_successful' },
    rewards: { experience: 500, bones: 500 },
    hidden: false,
    category: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
  },

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  {
    id: 'early_adopter',
    type: 'SPECIAL',
    title: '–†–∞–Ω–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    description: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –ø–µ—Ä–≤—ã–µ 1000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    icon: 'üöÄ',
    rarity: 'LEGENDARY',
    condition: { type: 'VALUE', target: 1000, metric: 'registration_rank' },
    rewards: { experience: 200, bones: 200, badge: 'early_adopter' },
    hidden: true,
    category: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ',
  },
  {
    id: 'beta_tester',
    type: 'SPECIAL',
    title: '–ë–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä',
    description: '–£—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π',
    icon: 'üß™',
    rarity: 'EPIC',
    condition: { type: 'COUNT', target: 1, metric: 'beta_features_tested' },
    rewards: { experience: 150, bones: 150, badge: 'beta_tester' },
    hidden: true,
    category: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ',
  },

  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
  {
    id: 'event_organizer',
    type: 'COMMUNITY',
    title: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π',
    description: '–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª–∏ 5 —Å–æ–±—ã—Ç–∏–π',
    icon: 'üìÖ',
    rarity: 'RARE',
    condition: { type: 'COUNT', target: 5, metric: 'events_organized' },
    rewards: { experience: 200, bones: 100 },
    hidden: false,
    category: '–°–æ–æ–±—â–µ—Å—Ç–≤–æ',
  },
  {
    id: 'community_helper',
    type: 'COMMUNITY',
    title: '–ü–æ–º–æ—â–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞',
    description: '–ü–æ–º–æ–≥–ª–∏ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
    icon: 'ü§ù',
    rarity: 'EPIC',
    condition: { type: 'COUNT', target: 20, metric: 'help_actions' },
    rewards: { experience: 300, bones: 200 },
    hidden: false,
    category: '–°–æ–æ–±—â–µ—Å—Ç–≤–æ',
  },
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function checkAchievements(userId: string, action: string, metadata?: any): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userStats = await getUserStats(userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    for (const achievementConfig of ACHIEVEMENT_CONFIGS) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      const existingAchievement = await prisma.achievement.findFirst({
        where: {
          userId,
          title: achievementConfig.title,
        },
      });

      if (existingAchievement) {
        continue; // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const isEarned = await checkAchievementCondition(achievementConfig, userStats, action, metadata);
      
      if (isEarned) {
        // –í—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        await grantAchievement(userId, achievementConfig);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
async function checkAchievementCondition(
  config: AchievementConfig,
  userStats: any,
  action: string,
  metadata?: any
): Promise<boolean> {
  const { condition } = config;

  switch (condition.type) {
    case 'COUNT':
      return userStats[condition.metric] >= condition.target;
    
    case 'STREAK':
      return userStats[`${condition.metric}_streak`] >= condition.target;
    
    case 'VALUE':
      return userStats[condition.metric] >= condition.target;
    
    case 'TIME':
      if (condition.timeframe === 'DAILY') {
        return userStats[`${condition.metric}_today`] >= condition.target;
      } else if (condition.timeframe === 'WEEKLY') {
        return userStats[`${condition.metric}_this_week`] >= condition.target;
      } else if (condition.timeframe === 'MONTHLY') {
        return userStats[`${condition.metric}_this_month`] >= condition.target;
      }
      return userStats[condition.metric] >= condition.target;
    
    case 'COMBINATION':
      // –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
      return await checkCombinationCondition(config, userStats, action, metadata);
    
    default:
      return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
async function checkCombinationCondition(
  config: AchievementConfig,
  userStats: any,
  action: string,
  metadata?: any
): Promise<boolean> {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
  // –ù–∞–ø—Ä–∏–º–µ—Ä, "—Å–æ–∑–¥–∞—Ç—å 10 –ø–æ—Å—Ç–æ–≤ –ò –ø–æ–ª—É—á–∏—Ç—å 50 –ª–∞–π–∫–æ–≤"
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
async function grantAchievement(userId: string, config: AchievementConfig): Promise<void> {
  try {
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
    await prisma.achievement.create({
      data: {
        userId,
        type: config.type,
        title: config.title,
        description: config.description,
        icon: config.icon,
      },
    });

    // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
    if (config.rewards.experience > 0) {
      await prisma.transaction.create({
        data: {
          userId,
          type: 'EARN',
          currency: 'EXPERIENCE',
          amount: config.rewards.experience,
          description: `–û–ø—ã—Ç –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${config.title}`,
        },
      });
    }

    if (config.rewards.bones > 0) {
      await prisma.transaction.create({
        data: {
          userId,
          type: 'EARN',
          currency: 'BONES',
          amount: config.rewards.bones,
          description: `–ö–æ—Å—Ç–æ—á–∫–∏ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${config.title}`,
        },
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∑–Ω–∞—á–æ–∫, –µ—Å–ª–∏ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω
    if (config.rewards.badge) {
      await prisma.badge.create({
        data: {
          userId,
          type: 'ACHIEVEMENT',
          title: config.rewards.badge,
          description: `–ó–Ω–∞—á–æ–∫ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${config.title}`,
          icon: config.icon,
        },
      });
    }

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await prisma.notification.create({
      data: {
        userId,
        type: 'ACHIEVEMENT',
        title: '–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!',
        message: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${config.title}". ${config.description}`,
      },
    });

    console.log(`üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${config.title}" –≤—ã–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserStats(userId: string): Promise<any> {
  const stats = {
    // –ü—Ä–æ–≥—É–ª–∫–∏
    walks_logged: await prisma.journalEntry.count({
      where: { userId, activity: 'WALK' },
    }),
    daily_walks_streak: await getStreak(userId, 'WALK'),
    
    // –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    trainings_logged: await prisma.journalEntry.count({
      where: { userId, activity: 'TRAINING' },
    }),
    
    // –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    posts_created: await prisma.post.count({
      where: { userId },
    }),
    likes_received: await prisma.like.count({
      where: {
        post: { userId },
      },
    }),
    
    // –°–±–æ—Ä –∫–æ—Å—Ç–æ—á–µ–∫
    bones_collected: await prisma.collectibleCollection.count({
      where: { userId },
    }),
    golden_bones_collected: await prisma.collectibleCollection.count({
      where: {
        userId,
        spawn: { type: 'GOLDEN_BONE' },
      },
    }),
    
    // –£—Ä–æ–≤–µ–Ω—å
    level: (await prisma.level.findUnique({
      where: { userId },
    }))?.level || 1,
    
    // –†–µ—Ñ–µ—Ä–∞–ª—ã
    referrals_successful: await prisma.referral.count({
      where: { referrerId: userId, status: 'COMPLETED' },
    }),
    
    // –°–æ–±—ã—Ç–∏—è
    events_organized: await prisma.event.count({
      where: { organizerId: userId },
    }),
    
    // –ü–æ–º–æ—â—å —Å–æ–æ–±—â–µ—Å—Ç–≤—É
    help_actions: 0, // –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    registration_rank: await getUserRegistrationRank(userId),
    beta_features_tested: 0, // –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
  };

  return stats;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–∏–∏ (streak)
async function getStreak(userId: string, activity: string): Promise<number> {
  // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
  const recentEntries = await prisma.journalEntry.findMany({
    where: {
      userId,
      activity,
    },
    orderBy: {
      createdAt: 'desc',
    },
    take: 30, // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
  });

  let streak = 0;
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  for (let i = 0; i < 30; i++) {
    const checkDate = new Date(today);
    checkDate.setDate(today.getDate() - i);
    
    const hasEntry = recentEntries.some(entry => {
      const entryDate = new Date(entry.createdAt);
      entryDate.setHours(0, 0, 0, 0);
      return entryDate.getTime() === checkDate.getTime();
    });

    if (hasEntry) {
      streak++;
    } else {
      break;
    }
  }

  return streak;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserRegistrationRank(userId: string): Promise<number> {
  const user = await prisma.user.findUnique({
    where: { id: userId },
    select: { createdAt: true },
  });

  if (!user) return 0;

  const earlierUsers = await prisma.user.count({
    where: {
      createdAt: {
        lt: user.createdAt,
      },
    },
  });

  return earlierUsers + 1;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
export function getAvailableAchievements(): AchievementConfig[] {
  return ACHIEVEMENT_CONFIGS.filter(achievement => !achievement.hidden);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export function getAchievementsByCategory(category: string): AchievementConfig[] {
  return ACHIEVEMENT_CONFIGS.filter(achievement => achievement.category === category);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É
export function getAchievementsByType(type: string): AchievementConfig[] {
  return ACHIEVEMENT_CONFIGS.filter(achievement => achievement.type === type);
}
