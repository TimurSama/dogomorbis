import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –¢–∏–ø—ã –∫–æ—Å—Ç–æ—á–µ–∫ –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
export interface BoneSpawnConfig {
  type: 'BONE' | 'YARN_BALL' | 'TREAT' | 'TOY' | 'GOLDEN_BONE';
  value: number;
  rarity: 'COMMON' | 'UNCOMMON' | 'RARE' | 'EPIC' | 'LEGENDARY';
  spawnChance: number; // 0-1
  maxSpawns: number;
  respawnTime: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
  radius: number; // —Ä–∞–¥–∏—É—Å –≤ –º–µ—Ç—Ä–∞—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–∏–∑–æ—Å—Ç–∏
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Å—Ç–æ—á–µ–∫
export const BONE_CONFIGS: Record<string, BoneSpawnConfig> = {
  BONE: {
    type: 'BONE',
    value: 5,
    rarity: 'COMMON',
    spawnChance: 0.7,
    maxSpawns: 50,
    respawnTime: 30,
    radius: 100,
  },
  YARN_BALL: {
    type: 'YARN_BALL',
    value: 3,
    rarity: 'COMMON',
    spawnChance: 0.8,
    maxSpawns: 80,
    respawnTime: 20,
    radius: 80,
  },
  TREAT: {
    type: 'TREAT',
    value: 10,
    rarity: 'UNCOMMON',
    spawnChance: 0.4,
    maxSpawns: 30,
    respawnTime: 60,
    radius: 120,
  },
  TOY: {
    type: 'TOY',
    value: 15,
    rarity: 'RARE',
    spawnChance: 0.2,
    maxSpawns: 15,
    respawnTime: 120,
    radius: 150,
  },
  GOLDEN_BONE: {
    type: 'GOLDEN_BONE',
    value: 50,
    rarity: 'LEGENDARY',
    spawnChance: 0.05,
    maxSpawns: 5,
    respawnTime: 480, // 8 —á–∞—Å–æ–≤
    radius: 200,
  },
};

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è —Å–ø–∞–≤–Ω–∞ –∫–æ—Å—Ç–æ—á–µ–∫ –≤ –ú–æ—Å–∫–≤–µ
export const MOSCOW_SPAWN_LOCATIONS = [
  { name: '–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ', lat: 55.7314, lng: 37.6006, weight: 0.15 },
  { name: '–°–æ–∫–æ–ª—å–Ω–∏–∫–∏', lat: 55.7944, lng: 37.6792, weight: 0.12 },
  { name: '–í–î–ù–•', lat: 55.8270, lng: 37.6390, weight: 0.10 },
  { name: '–ö–æ–ª–æ–º–µ–Ω—Å–∫–æ–µ', lat: 55.6670, lng: 37.6700, weight: 0.08 },
  { name: '–¶–∞—Ä–∏—Ü—ã–Ω–æ', lat: 55.6150, lng: 37.6810, weight: 0.08 },
  { name: '–ò–∑–º–∞–π–ª–æ–≤—Å–∫–∏–π –ø–∞—Ä–∫', lat: 55.7890, lng: 37.7800, weight: 0.07 },
  { name: '–ë–∏—Ç—Ü–µ–≤—Å–∫–∏–π –ø–∞—Ä–∫', lat: 55.6000, lng: 37.5500, weight: 0.06 },
  { name: '–ö—É–∑—å–º–∏–Ω–∫–∏', lat: 55.6900, lng: 37.7800, weight: 0.05 },
  { name: '–õ–æ—Å–∏–Ω—ã–π –æ—Å—Ç—Ä–æ–≤', lat: 55.8500, lng: 37.8500, weight: 0.04 },
  { name: '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –±–æ—Ä', lat: 55.7800, lng: 37.4500, weight: 0.03 },
  // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã
  { name: '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å', lat: 55.7539, lng: 37.6208, weight: 0.05 },
  { name: '–ê—Ä–±–∞—Ç', lat: 55.7520, lng: 37.5925, weight: 0.04 },
  { name: '–¢–≤–µ—Ä—Å–∫–∞—è', lat: 55.7616, lng: 37.6065, weight: 0.03 },
  { name: '–ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥', lat: 55.7558, lng: 37.6176, weight: 0.03 },
  { name: '–ó–∞–º–æ—Å–∫–≤–æ—Ä–µ—á—å–µ', lat: 55.7400, lng: 37.6200, weight: 0.02 },
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Ç–æ—á–∫–∏ –≤ —Ä–∞–¥–∏—É—Å–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
function generateRandomPointInRadius(centerLat: number, centerLng: number, radiusMeters: number) {
  const earthRadius = 6371000; // —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
  const latDelta = (radiusMeters / earthRadius) * (180 / Math.PI);
  const lngDelta = latDelta / Math.cos(centerLat * Math.PI / 180);
  
  const randomLat = centerLat + (Math.random() - 0.5) * latDelta * 2;
  const randomLng = centerLng + (Math.random() - 0.5) * lngDelta * 2;
  
  return {
    lat: Math.round(randomLat * 1000000) / 1000000, // –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤
    lng: Math.round(randomLng * 1000000) / 1000000,
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±–ª–∏–∑–∫–æ –∫–æ—Å—Ç–æ—á–∫–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
async function isLocationAvailable(lat: number, lng: number, radius: number): Promise<boolean> {
  const existingSpawns = await prisma.collectibleSpawn.findMany({
    where: {
      isActive: true,
      expiresAt: {
        gt: new Date(),
      },
    },
  });

  for (const spawn of existingSpawns) {
    const location = JSON.parse(spawn.location);
    const distance = calculateDistance(lat, lng, location.lat, location.lng);
    if (distance < radius) {
      return false;
    }
  }

  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
function calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {
  const R = 6371000; // —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLng = (lng2 - lng1) * Math.PI / 180;
  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
    Math.sin(dLng/2) * Math.sin(dLng/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Å—Ç–æ—á–µ–∫
export async function generateBoneSpawns(): Promise<void> {
  console.log('ü¶¥ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ—Å—Ç–æ—á–µ–∫...');

  // –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ—Å—Ç–æ—á–∫–∏
  await prisma.collectibleSpawn.updateMany({
    where: {
      expiresAt: {
        lt: new Date(),
      },
    },
    data: {
      isActive: false,
    },
  });

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Å—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
  for (const [type, config] of Object.entries(BONE_CONFIGS)) {
    const currentSpawns = await prisma.collectibleSpawn.count({
      where: {
        type: config.type,
        isActive: true,
        expiresAt: {
          gt: new Date(),
        },
      },
    });

    const neededSpawns = Math.max(0, config.maxSpawns - currentSpawns);
    
    if (neededSpawns === 0) {
      console.log(`‚úÖ ${type}: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Å—Ç–æ—á–µ–∫ (${currentSpawns}/${config.maxSpawns})`);
      continue;
    }

    let generated = 0;
    let attempts = 0;
    const maxAttempts = neededSpawns * 10; // –º–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫

    while (generated < neededSpawns && attempts < maxAttempts) {
      attempts++;

      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
      const totalWeight = MOSCOW_SPAWN_LOCATIONS.reduce((sum, loc) => sum + loc.weight, 0);
      let randomWeight = Math.random() * totalWeight;
      let selectedLocation = MOSCOW_SPAWN_LOCATIONS[0];

      for (const location of MOSCOW_SPAWN_LOCATIONS) {
        randomWeight -= location.weight;
        if (randomWeight <= 0) {
          selectedLocation = location;
          break;
        }
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É –≤ —Ä–∞–¥–∏—É—Å–µ 500 –º–µ—Ç—Ä–æ–≤ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞
      const spawnPoint = generateRandomPointInRadius(
        selectedLocation.lat,
        selectedLocation.lng,
        500
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Å—Ç–∞
      if (await isLocationAvailable(spawnPoint.lat, spawnPoint.lng, config.radius)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–Ω—Å —Å–ø–∞–≤–Ω–∞
        if (Math.random() <= config.spawnChance) {
          const expiresAt = new Date(Date.now() + config.respawnTime * 60 * 1000);

          await prisma.collectibleSpawn.create({
            data: {
              type: config.type,
              location: JSON.stringify(spawnPoint),
              value: config.value,
              isActive: true,
              expiresAt,
            },
          });

          generated++;
          console.log(`ü¶¥ –°–æ–∑–¥–∞–Ω–∞ ${type} –≤ ${selectedLocation.name} (${spawnPoint.lat.toFixed(6)}, ${spawnPoint.lng.toFixed(6)})`);
        }
      }
    }

    console.log(`‚úÖ ${type}: —Å–æ–∑–¥–∞–Ω–æ ${generated} –∫–æ—Å—Ç–æ—á–µ–∫ (–≤—Å–µ–≥–æ ${currentSpawns + generated}/${config.maxSpawns})`);
  }

  console.log('üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Å—Ç–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∫–æ—Å—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
export async function collectBone(
  userId: string,
  dogId: string | null,
  spawnId: string
): Promise<{ success: boolean; message: string; bonesEarned?: number }> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ—Å—Ç–æ—á–∫–∏
    const spawn = await prisma.collectibleSpawn.findUnique({
      where: { id: spawnId },
    });

    if (!spawn) {
      return { success: false, message: '–ö–æ—Å—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
    }

    if (!spawn.isActive) {
      return { success: false, message: '–ö–æ—Å—Ç–æ—á–∫–∞ —É–∂–µ —Å–æ–±—Ä–∞–Ω–∞' };
    }

    if (spawn.expiresAt && spawn.expiresAt < new Date()) {
      return { success: false, message: '–ö–æ—Å—Ç–æ—á–∫–∞ –∏—Å—Ç–µ–∫–ª–∞' };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–±–∏—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç—É –∫–æ—Å—Ç–æ—á–∫—É
    const existingCollection = await prisma.collectibleCollection.findFirst({
      where: {
        userId,
        spawnId,
      },
    });

    if (existingCollection) {
      return { success: false, message: '–í—ã —É–∂–µ —Å–æ–±–∏—Ä–∞–ª–∏ —ç—Ç—É –∫–æ—Å—Ç–æ—á–∫—É' };
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–±–æ—Ä–µ
    await prisma.collectibleCollection.create({
      data: {
        userId,
        dogId,
        spawnId,
      },
    });

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await prisma.transaction.create({
      data: {
        userId,
        type: 'EARN',
        currency: 'BONES',
        amount: spawn.value,
        description: `–°–æ–±—Ä–∞–Ω–∞ –∫–æ—Å—Ç–æ—á–∫–∞ ${spawn.type}`,
        metadata: JSON.stringify({
          spawnId,
          spawnType: spawn.type,
          location: spawn.location,
        }),
      },
    });

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ—Å—Ç–æ—á–∫—É
    await prisma.collectibleSpawn.update({
      where: { id: spawnId },
      data: { isActive: false },
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    await checkCollectionAchievements(userId);

    return {
      success: true,
      message: `–í—ã —Å–æ–±—Ä–∞–ª–∏ ${spawn.type} –∏ –ø–æ–ª—É—á–∏–ª–∏ ${spawn.value} –∫–æ—Å—Ç–æ—á–µ–∫!`,
      bonesEarned: spawn.value,
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∫–æ—Å—Ç–æ—á–∫–∏:', error);
    return { success: false, message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∫–æ—Å—Ç–æ—á–∫–∏' };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ —Å–±–æ—Ä—É –∫–æ—Å—Ç–æ—á–µ–∫
async function checkCollectionAchievements(userId: string): Promise<void> {
  const collections = await prisma.collectibleCollection.count({
    where: { userId },
  });

  const achievements = [
    { count: 1, title: '–ü–µ—Ä–≤–∞—è –∫–æ—Å—Ç–æ—á–∫–∞', description: '–°–æ–±—Ä–∞–ª–∏ –ø–µ—Ä–≤—É—é –∫–æ—Å—Ç–æ—á–∫—É', icon: 'ü¶¥' },
    { count: 10, title: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä', description: '–°–æ–±—Ä–∞–ª–∏ 10 –∫–æ—Å—Ç–æ—á–µ–∫', icon: 'üì¶' },
    { count: 50, title: '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –∫–æ—Å—Ç–æ—á–∫–∞–º–∏', description: '–°–æ–±—Ä–∞–ª–∏ 50 –∫–æ—Å—Ç–æ—á–µ–∫', icon: 'üéØ' },
    { count: 100, title: '–ú–∞—Å—Ç–µ—Ä —Å–±–æ—Ä–∞', description: '–°–æ–±—Ä–∞–ª–∏ 100 –∫–æ—Å—Ç–æ—á–µ–∫', icon: 'üèÜ' },
    { count: 500, title: '–õ–µ–≥–µ–Ω–¥–∞ –∫–æ—Å—Ç–æ—á–µ–∫', description: '–°–æ–±—Ä–∞–ª–∏ 500 –∫–æ—Å—Ç–æ—á–µ–∫', icon: 'üëë' },
  ];

  for (const achievement of achievements) {
    if (collections === achievement.count) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      const existingAchievement = await prisma.achievement.findFirst({
        where: {
          userId,
          title: achievement.title,
        },
      });

      if (!existingAchievement) {
        await prisma.achievement.create({
          data: {
            userId,
            type: 'COLLECTION',
            title: achievement.title,
            description: achievement.description,
            icon: achievement.icon,
          },
        });

        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await prisma.notification.create({
          data: {
            userId,
            type: 'ACHIEVEMENT',
            title: '–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!',
            message: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${achievement.title}"`,
          },
        });
      }
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Å—Ç–æ—á–µ–∫ –≤ —Ä–∞–¥–∏—É—Å–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getNearbyBones(
  lat: number,
  lng: number,
  radiusMeters: number = 1000
): Promise<any[]> {
  const spawns = await prisma.collectibleSpawn.findMany({
    where: {
      isActive: true,
      expiresAt: {
        gt: new Date(),
      },
    },
  });

  const nearbyBones = spawns.filter(spawn => {
    const location = JSON.parse(spawn.location);
    const distance = calculateDistance(lat, lng, location.lat, location.lng);
    return distance <= radiusMeters;
  });

  return nearbyBones.map(spawn => ({
    id: spawn.id,
    type: spawn.type,
    location: JSON.parse(spawn.location),
    value: spawn.value,
    expiresAt: spawn.expiresAt,
    config: BONE_CONFIGS[spawn.type],
  }));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Å—Ç–æ—á–µ–∫
export function startBoneGenerationScheduler(): void {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Å—Ç–æ—á–∫–∏ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  generateBoneSpawns();

  // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
  setInterval(() => {
    generateBoneSpawns();
  }, 15 * 60 * 1000);

  console.log('‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Å—Ç–æ—á–µ–∫ –∑–∞–ø—É—â–µ–Ω (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)');
}
